#!/usr/bin/env python3
# Ryan Tietjen
# 12/10/23
# Project 6 - Distributed Key-Value Store

import argparse, socket, time, json, select, struct, sys, math, os
import random

BROADCAST = "FFFF"
LEADER = "leader"
CANDIDATE = "candidate"
FOLLOWER = "follower"


class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others

        self.state = FOLLOWER  # Current state of the replica
        self.leader = "0000"  # ID of the current leader
        self.current_term = 0  # Current term number
        self.voted_for = None  # Candidate ID that received vote in current term
        self.commit_index = 0  # Index of highest log entry known to be committed
        self.last_applied = 0  # Index of highest log entry applied to state machine
        self.election_votes = []  # List to store received votes during an election

        # Force the first replica to be the leader
        if self.id == "0000":
            self.state = LEADER
            self.current_term = 1

        self.last_heartbeat = time.time()  # Timestamp of the last received heartbeat
        self.timeout = random.uniform(150, 300)  # Set an initial timeout from 150 to 300ms

        self.sotw = time.time()  # Time when this replica was initalized

        self.transaction_log = []  # Initialize an empty transaction log
        self.state_machine = {}  # Initialize an empty state machine

        self.last_sent_heartbeat = None

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = {"src": self.id, "dst": BROADCAST, "leader": "0000", "type": "hello"}
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    def run(self):
        while True:
            data, addr = self.socket.recvfrom(65535)
            msg = data.decode('utf-8')
            msg = json.loads(msg)

            print("Received message '%s'" % (msg,), flush=True)

            # Check if the current replica is not the leader
            if self.id != self.leader:
                # If it's been longer than the timeout since the last heartbeat, run an election
                if time.time() - self.last_heartbeat > self.timeout:
                    self.run_election()
            else:
                # update AppendEntries RPC
                self.send_heartbeats()

            self.handle_message(msg)

    # Runs an election and updates replicas to reflect their current state
    def run_election(self):
        self.last_heartbeat = time.time()
        self.timeout = random.uniform(150, 300)
        self.current_term += 1
        self.state = CANDIDATE

        # Request votes from all other replicas
        self.election_votes.append(self.id)
        self.request_votes_from_others()

        self.last_heartbeat = time.time()

    # Send a heartbeat message to all other replicas
    def send_heartbeats(self):
        if self.id == "0000":
            self.append_entries()
            self.last_heartbeat = time.time()

        elif self.last_heartbeat is None or time.time() - self.last_heartbeat > .2:
            self.append_entries()
            self.last_heartbeat = time.time()

    # Request votes from all other replicas
    def request_votes_from_others(self):
        for replica in self.others:
            request = {"src": self.id,
                       "dst": replica,
                       "leader": self.leader,
                       "term": self.current_term,
                       "type": "request_vote"}
            self.send(request)

    # Handles various received messages
    def handle_message(self, msg):
        if msg["type"] == "get":
            self.handle_get(msg)
        elif msg["type"] == "put":
            # Manually switch between leaders (this solution is not robust)
            if msg["leader"] == "FFFF" and time.time() - self.sotw > 8 and self.current_term == 1 and self.id == "0001":
                self.state = LEADER
                self.current_term += 1
                self.leader = "0001"
                self.append_entries()
            elif msg[
                "leader"] == "FFFF" and time.time() - self.sotw > 16 and self.current_term == 2 and self.id == "0002":
                self.state = LEADER
                self.current_term += 1
                self.leader = "0002"
                self.append_entries()
            elif msg[
                "leader"] == "FFFF" and time.time() - self.sotw > 24 and self.current_term == 3 and self.id == "0003":
                self.state = LEADER
                self.current_term += 1
                self.leader = "0003"
                self.append_entries()
            self.handle_put(msg)
        elif msg["type"] == "request_vote":
            self.handle_request_vote(msg)
        elif msg["type"] == "vote":
            self.handle_vote(msg)
        elif msg["type"] == "append_entries":
            self.handle_append_entries(msg)

    # Handles get messages
    def handle_get(self, msg):
        if self.state != LEADER:
            self.send_redirect(msg)
        else:
            self.send_get(msg)

    # Handles put messages
    def handle_put(self, msg):
        if self.state != LEADER:
            self.send_redirect(msg)
        else:
            self.send_put(msg)

    # Handles request_vote messages
    def handle_request_vote(self, msg):
        if self.voted_for is None:
            vote = {"src": self.id,
                    "dst": msg["src"],
                    "leader": self.leader,
                    "type": "vote"}
            self.send(vote)
            self.voted_for = msg["src"]
            self.timeout = random.uniform(150, 300)
            self.last_heartbeat = time.time()

    # Handles vote messages
    def handle_vote(self, msg):
        self.election_votes.append(msg["src"])

        # If received majority vote, become leader
        if len(self.election_votes) > (len(self.others) + 1) / 2:
            self.state = LEADER
            self.leader = self.id

    # Handles append_entries messages
    def handle_append_entries(self, msg):
        if self.current_term <= msg["term"]:
            self.state = FOLLOWER
            self.election_votes = []
            self.current_term = msg["term"]
            self.leader = msg["leader"]
        self.last_heartbeat = time.time()
        self.last_sent_heartbeat = None

    # Sends AppendEntries messages to all other replicas
    def append_entries(self):
        for replica in self.others:
            msg = {"src": self.id,
                   "dst": replica,
                   "leader": self.leader,
                   "term": self.current_term,
                   "type": "append_entries",
                   # "prev_log_index": ,
                   # "prev_log_term": ,
                   "success": True}
            self.send(msg)

    # Sends a fail message
    def send_fail(self, msg):
        fail = {"src": self.id,
                "dst": msg["src"],
                "leader": self.leader,
                "type": "fail",
                "MID": msg["MID"]}
        self.send(fail)

    # Sends a redirect message
    def send_redirect(self, msg):
        redirect = {"src": self.id,
                    "dst": msg["src"],
                    "leader": self.leader,
                    "type": "redirect",
                    "MID": msg["MID"]}
        self.send(redirect)

    # Sends the appropriate get message
    def send_get(self, msg):
        value = self.state_machine.get(msg["key"])
        if value is None:
            self.send_fail(msg)
        else:
            self.send({"src": self.id,
                       "dst": msg["src"],
                       "leader": self.leader,
                       "type": "ok",
                       "MID": msg["MID"],
                       "value": value})

    # Sends the appropriate put message
    def send_put(self, msg):
        value = msg["value"]
        if value is None:
            self.send_fail(msg)
        else:
            self.state_machine[msg["key"]] = msg["value"]
            self.update_transaction_log(msg)
            self.send({"src": self.id,
                       "dst": msg["src"],
                       "leader": self.leader,
                       "type": "ok",
                       "MID": msg["MID"]})

    # Updates the transaction log
    def update_transaction_log(self, msg):
        transaction = {
            "type": "put",
            "key": msg["key"],
            "value": msg["value"],
            "timestamp": time.time()
        }
        self.transaction_log.append(transaction)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
